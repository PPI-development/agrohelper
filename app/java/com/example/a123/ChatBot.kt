package com.example.a123

import android.content.Context
import com.google.gson.Gson
import com.google.gson.GsonBuilder
import com.google.gson.JsonElement
import com.google.gson.JsonDeserializationContext
import com.google.gson.JsonDeserializer
import java.io.InputStreamReader
import java.lang.reflect.Type
import kotlin.math.sqrt
import com.google.gson.InstanceCreator

class ChatBot(context: Context) {

    private var lastImageRecognitionResult: String? = null

    // Метод для получения ответа
    fun getResponse(userInput: String, context: Context): String {
        // Проверка на простые запросы
        if (isSimpleRequest(userInput)) {
            return getSimpleResponse(userInput)
        }

        // Сначала попробуем найти ответ в тексте
        val textAnswer = getAnswerFromText(userInput, context)
        if (textAnswer.isNotEmpty()) {
            return textAnswer  // Если найден ответ на основе текста, возвращаем его
        }

        // Если есть результат распознавания изображения
        if (lastImageRecognitionResult != null) {
            return "Результат распознавания изображения: $lastImageRecognitionResult"
        }

        return "Извините, я не смог найти ответ на ваш вопрос."
    }

    // Сохранение результата распознавания изображения
    fun saveImageContext(imageRecognitionResult: String) {
        lastImageRecognitionResult = imageRecognitionResult
    }


    private fun isSimpleRequest(userInput: String): Boolean {
        val simpleGreetings = listOf(
            "привет", "здравствуйте", "добрый день", "как дела", "что ты умеешь", "кто ты",
            "как тебя зовут", "что ты такое", "что делаешь", "как помочь", "спасибо",
            "до свидания", "пока", "где я нахожусь", "какая погода", "какой твой любимый цвет",
            "какой сейчас год", "что ты думаешь", "чем ты занимаешься", "как работать с тобой",
            "что ты можешь", "как мне начать", "кто твой создатель", "сколько тебе лет",
            "ты умный", "кто твой враг", "как долго ты работаешь", "зачем ты создан",
            "чем ты лучше других", "мне нужна помощь", "что ты знаешь о фермерстве",
            "как вырастить урожай", "как бороться с вредителями", "что делать, если растение заболело",
            "как улучшить почву", "какие растения лучше для моей земли", "какие культуры посеять",
            "как ухаживать за растениями", "как контролировать полив", "как защитить урожай",
            "какие удобрения использовать", "что такое биоагенты", "как повысить урожайность",
            "сколько воды нужно растениям", "нужна ли моим растениям тень", "как выбрать семена",
            "когда лучше сеять", "какие культуры для осени", "что такое севооборот",
            "как бороться с повеликой", "что делать, если завелись вредители",
            "что делать при заморозках", "как защитить урожай от заморозков",
            "как использовать мульчу", "что такое компост", "какие болезни бывают у растений",
            "как распознать болезнь у растения", "как бороться с сорняками",
            "какие инструменты нужны фермеру", "что такое органическое земледелие"
        )
        return simpleGreetings.contains(userInput.toLowerCase())
    }

    private fun getSimpleResponse(userInput: String): String {
        return when (userInput.toLowerCase()) {
            "привет" -> "Привет!"
            "здравствуйте" -> "Здравствуйте!"
            "добрый день" -> "Добрый день!"
            "как дела" -> "Всё хорошо!"
            "что ты умеешь" -> "Я могу определить заболевание растений, а также посоветовать Вам, как с ними бороться!"
            "кто ты" -> "Я ИИ Агроном, предназначенный для оказания поддержки фермерам!"
            "как тебя зовут" -> "Меня зовут Агроном-бот."
            "что ты такое" -> "Я искусственный интеллект, созданный для помощи фермерам."
            "что делаешь" -> "Жду Ваших запросов, чтобы помочь!"
            "как помочь" -> "Я могу помочь с распознаванием болезней растений и рекомендациями по уходу за ними."
            "спасибо" -> "Всегда рад помочь!"
            "до свидания", "пока" -> "До встречи!"
            "где я нахожусь" -> "Я не могу точно сказать, где Вы находитесь, но я всегда рядом, чтобы помочь с вопросами."
            "какая погода" -> "Мне не известна текущая погода, но я могу помочь с агрономическими советами!"
            "какой твой любимый цвет" -> "Я предпочитаю зелёный, как цвет здоровых растений."
            "какой сейчас год" -> "Сейчас 2024 год."
            "что ты думаешь" -> "Я думаю, что надо следить за состоянием растений и вовремя проводить профилактику!"
            "чем ты занимаешься" -> "Я анализирую запросы и помогаю в агрономии."
            "как работать с тобой" -> "Просто напишите вопрос, связанный с растениями, и я постараюсь помочь."
            "что ты можешь" -> "Я могу распознать болезни растений, дать рекомендации по уходу, и ещё много чего!"
            "как мне начать" -> "Вы можете отправить мне вопрос или фото растения, и я помогу Вам."
            "кто твой создатель" -> "Меня создала команда разработчиков для помощи в агрономии."
            "сколько тебе лет" -> "Я был создан недавно, чтобы помочь фермерам."
            "ты умный" -> "Я стараюсь использовать всю доступную информацию для решения задач."
            "кто твой враг" -> "Мой враг — это болезни растений и вредители!"
            "как долго ты работаешь" -> "Я всегда готов помочь, в любое время."
            "зачем ты создан" -> "Я был создан для помощи фермерам в распознавании болезней растений и улучшении урожайности."
            "чем ты лучше других" -> "Я специально разработан для фермеров и готов предложить конкретные агрономические решения."
            "мне нужна помощь" -> "Я здесь, чтобы помочь! Задайте вопрос, и я постараюсь помочь Вам."
            "что ты знаешь о фермерстве" -> "Я обучен помогать в сельском хозяйстве, особенно в вопросах защиты растений."
            "как вырастить урожай" -> "Главное — правильный уход, регулярный полив и защита от болезней и вредителей."
            "как бороться с вредителями" -> "Используйте биоагенты и следите за состоянием растений."
            "что делать, если растение заболело" -> "Определите болезнь и примените соответствующие меры защиты."
            "как улучшить почву" -> "Добавляйте органические удобрения, мульчируйте и используйте компост."
            "какие растения лучше для моей земли" -> "Это зависит от типа почвы и климатических условий."
            "какие культуры посеять" -> "Зависит от сезона. Например, осенью популярны озимые культуры."
            "как ухаживать за растениями" -> "Следите за регулярным поливом, вносите удобрения и защищайте от вредителей."
            "как контролировать полив" -> "Используйте системы автоматического полива и следите за влажностью почвы."
            "как защитить урожай" -> "Регулярно осматривайте растения и используйте биоагенты для защиты."
            "какие удобрения использовать" -> "Я могу помочь подобрать органические удобрения в зависимости от типа растения."
            "что такое биоагенты" -> "Это биологические средства для защиты растений от вредителей и болезней."
            "как повысить урожайность" -> "Правильный севооборот, удобрения, защита от вредителей и своевременный полив помогут."
            "сколько воды нужно растениям" -> "Каждому виду растений нужно разное количество воды, следите за влажностью почвы."
            "нужна ли моим растениям тень" -> "Некоторым растениям полезна полутень, но это зависит от конкретного вида."
            "как выбрать семена" -> "Семена нужно выбирать исходя из условий климата и типа почвы."
            "когда лучше сеять" -> "Весной или осенью, в зависимости от культуры. Я могу подсказать конкретные сроки."
            "какие культуры для осени" -> "Озимые культуры, такие как пшеница, отлично подходят для осенней посадки."
            "что такое севооборот" -> "Это система чередования культур для поддержания плодородия почвы."
            "как бороться с повеликой" -> "Для борьбы с повеликой можно использовать гербициды или специальные биоагенты."
            "что делать, если завелись вредители" -> "Нужно определить вид вредителя и применить биоагенты или другие методы защиты."
            "что делать при заморозках" -> "Используйте укрытия для растений и мульчу для защиты корней."
            "как защитить урожай от заморозков" -> "Используйте укрывной материал или создайте микроклимат вокруг растений."
            "как использовать мульчу" -> "Мульчирование помогает удерживать влагу и защищает почву от эрозии."
            "что такое компост" -> "Компост — это органическое удобрение, полученное из переработанных растительных отходов."
            "какие болезни бывают у растений" -> "Существует множество болезней, таких как мучнистая роса, фитофтороз, и я могу помочь их определить."
            "как распознать болезнь у растения" -> "Отправьте фото растения, и я постараюсь помочь с диагнозом."
            "как бороться с сорняками" -> "Регулярная прополка и использование мульчи помогут уменьшить рост сорняков."
            "какие инструменты нужны фермеру" -> "Основные инструменты — это лопата, тяпка, секатор и опрыскиватель."
            "что такое органическое земледелие" -> "Это метод выращивания растений без использования синтетических удобрений и пестицидов."

            else -> "Не понимаю Вас, повторите вопрос..."
        }
    }


    // Метод для загрузки текста из внешнего файла (например, из уже существующего файла)
    private fun loadExternalText(context: Context, fileName: String): List<String> {
        val assetManager = context.assets
        val inputStream = assetManager.open(fileName)
        return inputStream.bufferedReader().readLines()
    }

    // Метод для поиска ответа в тексте на основе ключевых слов
    fun getAnswerFromText(userInput: String, context: Context): String {
        // Разбиваем текст на фрагменты (загрузим из внешнего файла)
        val textFragments = loadExternalText(context, "external_text.txt") // Замените на имя вашего файла с текстом

        // Преобразуем пользовательский ввод в нижний регистр и разбиваем на слова
        val userWords = userInput.toLowerCase().split(" ")

        // Ищем фрагмент текста, который содержит наибольшее количество слов из пользовательского запроса
        var bestMatch = ""
        var bestScore = 0

        for (fragment in textFragments) {
            var score = 0
            val fragmentWords = fragment.toLowerCase().split(" ")

            // Считаем количество совпадающих слов
            for (word in userWords) {
                if (fragmentWords.contains(word)) {
                    score++
                }
            }

            // Если текущий фрагмент имеет больше совпадений, обновляем лучший результат
            if (score > bestScore) {
                bestScore = score
                bestMatch = fragment
            }
        }

        // Если не нашли хорошего совпадения, можно вернуть ответ по умолчанию
        return if (bestScore > 0) {
            bestMatch
        } else {
            "Извините, я не смог найти ответ на ваш вопрос."
        }
    }

    // Кастомный адаптер для float[]
    class FloatArrayAdapter : JsonDeserializer<FloatArray> {
        override fun deserialize(
            json: JsonElement,
            typeOfT: Type,
            context: JsonDeserializationContext
        ): FloatArray {
            val jsonArray = json.asJsonArray
            val floatArray = FloatArray(jsonArray.size()) // создаем массив нужного размера
            for (i in 0 until jsonArray.size()) { // Используем цикл от 0 до размера массива
                floatArray[i] = jsonArray.get(i).asFloat // Получаем каждый элемент как float
            }
            return floatArray
        }
    }

    class FloatArrayInstanceCreator : InstanceCreator<FloatArray> {
        override fun createInstance(type: Type): FloatArray {
            return FloatArray(0) // Создаем пустой массив
        }
    }
}
